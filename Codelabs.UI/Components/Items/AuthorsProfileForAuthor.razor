@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using Codelabs.Core
@using Codelabs.BLL
@inject IHttpContextAccessor HttpContextAccessor
@inject NavigationManager Nav
@rendermode InteractiveServer

<Modal @ref="editDataModal" title="Редактирование ваших данных" UseStaticBackdrop="true" CloseOnEscape="false" ModalType="ModalType.Dark" BodyCssClass="modal-body" Size="ModalSize.ExtraLarge">
    <BodyTemplate>
        <EditForm Model="_activeUser" OnValidSubmit="FinishEditingData" FormName="createExerciseForm">
            <DataAnnotationsValidator />
            <div class="row-flex-div centered-flex-div">
                <div class="flex-one-item small-margin-right">
                    <InputText @bind-Value="_activeUser.Name" Placeholder="@Model.Name" class="form-item flex-one-item" />
                    <ValidationMessage For="@(() => _activeUser.Name)" />
                </div>
                <div class="flex-one-item">
                    <InputText @bind-Value="_activeUser.Surname" Placeholder="@Model.Surname" class="form-item flex-one-item" />
                    <ValidationMessage For="@(() => _activeUser.Surname)" />
                </div>
                <div class="flex-one-item small-margin-left">
                    <InputText @bind-Value="_activeUser.Email" Placeholder="@Model.Email" class="form-item flex-one-item" />
                    <ValidationMessage For="@(() => _activeUser.Email)" />
                </div>
            </div>

            <div class="small-margin-top display-flex-end">
                <Button Color="ButtonColor.Danger" @onclick="CancelEditingData" class="middleground-text middle-width">Назад</Button>
                <Button Color="ButtonColor.Success" @onclick="FinishEditingData" Type="ButtonType.Submit" class="middleground-text small-margin-left middle-width">ОК</Button>
            </div>
        </EditForm>
    </BodyTemplate>
</Modal>

<AuthorizeView>
    <Authorized>
        @if (Model != null)
        {
            <div class="centered-content">
                <div class="violet-div">
                    <p class="medium-text">Имя: @Model.Name</p>
                    <p class="medium-text">Фамилия: @Model.Surname</p>
                    <p class="medium-text">Почта: @Model.Email</p>
                    <Button class="submit-button medium-text" Color="ButtonColor.Success" @onclick="EditData">РЕДАКТИРОВАТЬ</Button>
                </div>
            </div>

            <p class="big-text">Ваши уроки</p>
            <ShowcaseComponent ChunkSize="3" AuthorID="@AuthorID" />
            <div class="centered-content">
                <Button class="submit-button medium-text" Color="ButtonColor.Success" @onclick="Redirect">Добавить</Button>
            </div>
        }
        else
        {
            <p class="medium-text">Пожалуйста, <a href="/login">войдите в систему как автор</a> для доступа к этой странице.</p>
        }
    </Authorized>
    <NotAuthorized>
        <p class="medium-text">Пожалуйста, <a href="/login">войдите в систему как автор</a> для доступа к этой странице.</p>
    </NotAuthorized>
</AuthorizeView>

@code {
    [Parameter]
    public int AuthorID { get; set; }

    [Parameter]
    public UserOutputModel Model { get; set; }

    private Modal editDataModal = default!;

    private UserInputModel? _activeUser;

    private UserManager UserManager = new();

    public void FinishEditingData()
    {
        UserManager.EditUserByID(AuthorID, _activeUser);
        editDataModal.HideAsync();
        ReloadThisPage();
    }

    public void CancelEditingData()
    {
        Console.WriteLine("editing AUTHOR INFO cancelled");
        editDataModal.HideAsync();
    }   

    public void EditData()
    {
        _activeUser = new();
        editDataModal.ShowAsync();
    }

    protected override void OnInitialized()
    {
        var userManager = new UserManager();
        var user = HttpContextAccessor.HttpContext.User;
        if (user.Identity.IsAuthenticated)
        {
            AuthorID = int.Parse(user.FindFirst(ClaimTypes.Name)?.Value);
            Model = userManager.GetAuthorByID(AuthorID);
        }
    }

    public void Redirect()
    {
        Nav.NavigateTo("/create-lesson", true);
    }

    public void ReloadThisPage()
    {
        Nav.NavigateTo("/profile", true);
    }
}