@rendermode InteractiveServer
@inject NavigationManager NavManager

<Modal @ref="createExerciseModal" title=@GetModalTitle() UseStaticBackdrop="true" CloseOnEscape="false" ModalType="ModalType.Dark" BodyCssClass="modal-body" Size="ModalSize.ExtraLarge">
    <BodyTemplate>
        <EditForm Model="_activeExercise" OnValidSubmit="FinishCreatingExercise" FormName="createExerciseForm">
            <DataAnnotationsValidator />
            <div class="row-flex-div centered-flex-div">
                <div сlass="column-flex-div create-lesson-step3-div small-margin-right">
                    <InputText @bind-Value="_activeExercise.Name" Placeholder="Название" class="form-item"/>
                    <ValidationMessage For="@(() => _activeExercise.Name)" />
                </div>
                <div сlass="column-flex-div create-lesson-step3-div">
                    <InputText @bind-Value="_activeExercise.DesiredOutput" Placeholder="Ожидаемый вывод" class="form-item"/>
                    <ValidationMessage For="@(() => _activeExercise.DesiredOutput)" />
                </div>
                <div сlass="column-flex-div create-lesson-step3-div small-margin-left">
                    <InputText @bind-Value="_activeExercise.ProgramInput" Placeholder="Ввод" class="form-item"/>
                    <ValidationMessage For="@(() => _activeExercise.ProgramInput)" />
                </div>
            </div>
            <InputTextArea @bind-Value="_activeExercise.Requirements" Placeholder="Требования" class="form-item lesson-requirements"/>
            <ValidationMessage For="@(() => _activeExercise.Requirements)" />
            <div class="small-margin-top display-flex-end">
                <Button Color="ButtonColor.Danger" @onclick="CancelCreatingExercise" class="middleground-text middle-width">Назад</Button>
                <Button Color="ButtonColor.Success" Type="ButtonType.Submit" class="middleground-text small-margin-left middle-width">Завершить</Button>
            </div>
        </EditForm>
    </BodyTemplate>
</Modal>

<div class="form-item step3-box">
    <div class="exercises-box">
        @foreach (ExerciseInputModel exercise in lessonModel.Exercises)
        {
            <div class="exercise form-item exercise-item-small">
                <p class="exercise-name medium-text small-margin-top">@exercise.Name</p>
                <button @onclick="() => EditExercise(lessonModel.Exercises.IndexOf(exercise))" class="edit-button exercise-item-small-button">
                    <img src="images/edit_icon.png" />
                </button>
                <button @onclick="() => DeleteExercise(lessonModel.Exercises.IndexOf(exercise))" class="delete-button exercise-item-small-button">
                    <img src="images/delete_icon.png" />
                </button>
            </div>
        }
    </div>
</div>
<div class="tools-box form-item">
    <button @onclick="CreateExercise" class="pagination-button small-pagination-button">+</button>
</div>

@code {
    [Parameter]
    public LessonInputModel lessonModel { get; set; }

    private Modal createExerciseModal = default!;

    private ExerciseInputModel? _activeExercise;
    private int? _activeExerciseIndex;
    private bool _editMode = false;

    public void DeleteExercise(int exerciseIndex)
    {
        try
        {
            var exercise = lessonModel.Exercises[exerciseIndex];
            lessonModel.Exercises.Remove(exercise);
        }
        catch (IndexOutOfRangeException) { }
    }

    public void EditExercise(int exerciseIndex)
    {
        try
        {
            _activeExerciseIndex = exerciseIndex;
            _activeExercise = new ExerciseInputModel()
            {
                    ID = lessonModel.Exercises[exerciseIndex].ID,
                    Name = lessonModel.Exercises[exerciseIndex].Name,
                    DesiredOutput = lessonModel.Exercises[exerciseIndex].DesiredOutput,
                    ProgramInput = lessonModel.Exercises[exerciseIndex].ProgramInput,
                    Requirements = lessonModel.Exercises[exerciseIndex].Requirements
            };
            _editMode = true;
            createExerciseModal.ShowAsync();
        }
        catch (IndexOutOfRangeException) { }
    }

    public void CreateExercise()
    {
        _activeExercise = new();
        createExerciseModal.ShowAsync();
    }

    public void FinishCreatingExercise()
    {
        if (!_editMode)
        {
            lessonModel.Exercises.Add(_activeExercise);
        }
        else
        {
            _editMode = false;
            lessonModel.Exercises[(int)_activeExerciseIndex] = _activeExercise;
        }
        _activeExercise = null;
        _activeExerciseIndex = null;
        createExerciseModal.HideAsync();
    }

    public void CancelCreatingExercise()
    {
        _activeExercise = null;
        _activeExerciseIndex = null;
        createExerciseModal.HideAsync();
    }

    private string GetModalTitle()
    {
        return _editMode ? "Редактирование задачи" : "Создание задачи";
    }
}