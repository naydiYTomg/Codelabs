@rendermode InteractiveServer
@inject NavigationManager NavManager

<Modal @ref="createExerciseModal" title=@GetModalTitle() UseStaticBackdrop="true" CloseOnEscape="false" ModalType="ModalType.Dark" BodyCssClass="modal-body" Size="ModalSize.ExtraLarge">
    <BodyTemplate>
        <EditForm Model="_activeExercise" OnValidSubmit="FinishCreatingExercise" FormName="createExerciseForm">
            <DataAnnotationsValidator />
            <div class="row-flex-div centered-flex-div">
                <div class="flex-one-item small-margin-right">
                    <InputText @bind-Value="_activeExercise.Name" Placeholder="Название" class="form-item flex-one-item"/>
                    <ValidationMessage For="@(() => _activeExercise.Name)" />
                </div>
                <div class="flex-one-item">
                    <InputText @bind-Value="_activeExercise.DesiredOutput" Placeholder="Ожидаемый вывод" class="form-item flex-one-item" />
                    <ValidationMessage For="@(() => _activeExercise.DesiredOutput)" />
                </div>
                <div class="flex-one-item small-margin-left">
                    <InputText @bind-Value="_activeExercise.ProgramInput" Placeholder="Ввод" class="form-item flex-one-item" />
                    <ValidationMessage For="@(() => _activeExercise.ProgramInput)" />
                </div>
            </div>
            <div style="display: flex;flex-direction: column;align-items: center;margin-top: 10px;">
                <div style="width: 100%">
                    <button type="button" class="@GetStyle(0)" @onclick="() => ToTab(0)">КОД</button>
                    <button type="button" class="@GetStyle(1)" @onclick="() => ToTab(1)">ПРОСМОТР</button>
                </div>
                @if (_activeTabIndex == 0)
                {
                    <TextAreaInput @bind-Value="_activeExercise.Requirements" class="form-item step3-md-box" Placeholder="Требования (Markdown)" />
                }
                else if (_activeTabIndex == 1)
                {
                    <div class="form-item step3-md-box">
                        <MarkdownPreview Content="@_activeExercise.Requirements" />
                    </div>
                }
                <ValidationMessage For="@(() => _activeExercise.Requirements)" />
            </div>
            <div class="small-margin-top display-flex-end">
                <Button Color="ButtonColor.Danger" @onclick="CancelCreatingExercise" class="middleground-text middle-width">Назад</Button>
                <Button Color="ButtonColor.Success" Type="ButtonType.Submit" class="middleground-text small-margin-left middle-width">Завершить</Button>
            </div>
        </EditForm>
    </BodyTemplate>
</Modal>

<div class="form-item step3-box">
    <div class="exercises-box">
        @foreach (ExerciseInputModel exercise in lessonModel.Exercises)
        {
            @if (!exercise.IsDeleted)
            {
                <div class="exercise form-item exercise-item-small">
                    <p class="exercise-name medium-text small-margin-top">@exercise.Name</p>
                    <button @onclick="() => EditExercise(lessonModel.Exercises.IndexOf(exercise))" class="edit-button exercise-item-small-button">
                        <img src="images/edit_icon.png" />
                    </button>
                    <button @onclick="() => DeleteExercise(lessonModel.Exercises.IndexOf(exercise))" class="delete-button exercise-item-small-button">
                        <img src="images/delete_icon.png" />
                    </button>
                </div>
            }
        }
    </div>
</div>
<div class="tools-box form-item">
    <button @onclick="CreateExercise" class="pagination-button small-pagination-button">+</button>
</div>

@code {
    [Parameter]
    public LessonInputModel lessonModel { get; set; }

    private Modal createExerciseModal = default!;

    private ExerciseInputModel? _activeExercise;
    private int? _activeExerciseIndex;
    private bool _editMode = false;
    private int _activeTabIndex = 0;

    public void ToTab(int tabIndex)
    {
        _activeTabIndex = tabIndex;
    }

    private string GetStyle(int tabIndex)
    {
        if (tabIndex == _activeTabIndex)
        {
            return "tab-button active-text";
        }
        else
        {
            return "tab-button";
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        foreach (var exercise in lessonModel.Exercises)
        {
            Console.WriteLine($"{exercise.Name} {exercise.IsDeleted}");
        }
    }

    public void DeleteExercise(int exerciseIndex)
    {
        try
        {
            lessonModel.Exercises[exerciseIndex].IsDeleted = true;
        }
        catch (IndexOutOfRangeException) { }
    }

    public void EditExercise(int exerciseIndex)
    {
        try
        {
            _activeExerciseIndex = exerciseIndex;
            _activeExercise = new ExerciseInputModel()
            {
                    ID = lessonModel.Exercises[exerciseIndex].ID,
                    Name = lessonModel.Exercises[exerciseIndex].Name,
                    DesiredOutput = lessonModel.Exercises[exerciseIndex].DesiredOutput,
                    ProgramInput = lessonModel.Exercises[exerciseIndex].ProgramInput,
                    Requirements = lessonModel.Exercises[exerciseIndex].Requirements
            };
            _editMode = true;
            createExerciseModal.ShowAsync();
        }
        catch (IndexOutOfRangeException) { }
    }

    public void CreateExercise()
    {
        _activeExercise = new();
        createExerciseModal.ShowAsync();
    }

    public void FinishCreatingExercise()
    {
        if (!_editMode)
        {
            lessonModel.Exercises.Add(_activeExercise);
        }
        else
        {
            _editMode = false;
            lessonModel.Exercises[(int)_activeExerciseIndex] = _activeExercise;
        }
        _activeExercise = null;
        _activeExerciseIndex = null;
        createExerciseModal.HideAsync();
    }

    public void CancelCreatingExercise()
    {
        _activeExercise = null;
        _activeExerciseIndex = null;
        createExerciseModal.HideAsync();
    }

    private string GetModalTitle()
    {
        return _editMode ? "Редактирование задачи" : "Создание задачи";
    }
}