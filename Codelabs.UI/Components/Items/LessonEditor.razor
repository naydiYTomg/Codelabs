@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using System.ComponentModel.DataAnnotations
@inject AuthService AuthService
@inject NavigationManager NavManager
@rendermode InteractiveServer

<head>
    <link rel="stylesheet" href="css/buttons.css" />
    <link rel="stylesheet" href="css/items.css" />
    <link rel="stylesheet" href="css/miscellaneous.css">
    <link rel="stylesheet" href="css/texts.css" />
</head>

<div class="create-lesson-box">
    @if (AuthService.IsAuthorized() && AuthService.GetUserRole() == RoleType.Author)
    {
        <EditForm EditContext="@_editContext">
            <DataAnnotationsValidator />
            <div class="step-box">
                @switch (_currentStep)
                {
                    case 1:
                        <CreateLessonStep1 lessonModel="lessonModel" />
                        break;
                    case 2:
                        <CreateLessonStep2 lessonModel="lessonModel" />
                        @if (_stage < 2) _stage = 2;
                        break;
                    case 3:
                        <CreateLessonStep3 lessonModel="lessonModel" />
                        @if (_stage < 3) _stage = 3;
                        break;
                }
            </div>
            <div class="pagination-box">
                @if (EditMode)
                {
                    <button type="button" class="delete-button" style="border-radius: 10px;font-size: 24px;padding: 0 10px;margin-right: 6px;" @onclick="DeleteLesson">Удалить урок</button>
                }
                <button type="button" class="pagination-button pagination-button01" style="background-color: @GetColor(1);" @onclick="() => {ChangeStep(1);}">1</button>
                @if (_stage >= 2 || EditMode)
                {
                    <button type="button" class="pagination-button pagination-button01" style="background-color: @GetColor(2);" @onclick="() => {ChangeStep(2);}">2</button>
                }
                @if (_stage >= 3 || EditMode)
                {
                    <button type="button" class="pagination-button pagination-button01" style="background-color: @GetColor(3);" @onclick="() => {ChangeStep(3);}">3</button>
                }

                @if (_currentStep != 3)
                {
                    @if (!EditMode)
                    {
                        <button type="submit" class="pagination-button pagination-button02" @onclick="ValidateCurrentStep">Далее</button>
                    }
                    else 
                    {
                        <button type="submit" class="pagination-button pagination-button02" @onclick="NextStep">Далее</button>
                    }
                }
                else
                {
                    <button type="button" class="pagination-button pagination-button03" @onclick="ValidateAndProceed">Завершить</button>
                }
            </div>
            <ValidationSummary class="no-display"/>
        </EditForm>
    }
    else
    {
        if (!AuthService.IsAuthorized())
        {
            <div style="display: flex;justify-content: center;">
                <p class="not-authorized-link">Вы не авторизованы! <span><a href="/login" class="to-register-button medium-text underlined-name">Авторизоваться</a></span></p>
            </div>
        }
        else if (AuthService.GetUserRole() != RoleType.Author)
        {
            <p class="not-authorized-link">Чтобы создавать/редактировать уроки, войдите как автор</p>
        }
    }
</div>

@code {
    [Parameter]
    public int? LessonID { get; set; }

    [Parameter]
    public bool EditMode { get; set; } = false;

    private EditContext _editContext;
    private LessonInputModel lessonModel = new();

    private int _currentStep = 1;
    private int _stage = 1;

    protected override async Task OnInitializedAsync()
    {
        if (AuthService.IsAuthorized())
        {
            _editContext = new EditContext(lessonModel);

            lessonModel.AuthorID = AuthService.GetUserID();

            if (EditMode && LessonID != null)
            {
                var lessonManager = new LessonManager();
                var exerciseManager = new ExerciseManager();
                var outputModel = await lessonManager.GetLessonByID((int)LessonID);
                if (outputModel != null && outputModel.Author.ID == lessonModel.AuthorID)
                {
                    lessonModel = new()
                    {
                        Name = outputModel.Name,
                        Description = outputModel.Description,
                        Cost = outputModel.Cost,
                        Requirements = outputModel.Content,
                        AuthorID = outputModel.Author.ID,
                        LanguageID = outputModel.Language.ID,
                        Exercises = exerciseManager.MapExercisesToInputModels(outputModel.Exercises)
                    };
                }
                else
                {
                    NavManager.NavigateTo("/404");
                }
            }
        }
        await base.OnInitializedAsync();
    }

    private void NextStep()
    {
        if (_currentStep < 3)
        {
            _currentStep++;
            if (_stage < _currentStep) _stage = _currentStep;
        }
    }

    private void ChangeStep(int nextStep)
    {
        _currentStep = nextStep;
    }

    private async Task DeleteLesson()
    {
        if (EditMode) 
        {
            if (LessonID != null) 
            {
                var lessonManager = new LessonManager();
                await lessonManager.DeleteLessonByID((int)LessonID);
                NavManager.NavigateTo("/profile");
            }
        }
    }

    private async Task ValidateAndProceed()
    {
        _currentStep = 3;
        StateHasChanged();

        var validationContext = new ValidationContext(lessonModel);
        var validationResults = new List<ValidationResult>();

        bool isValid = Validator.TryValidateObject(lessonModel, validationContext, validationResults, true);

        if (isValid)
        {
            await FinishCreating();
        }
        else
        {
            var errorProperties = validationResults.SelectMany(r => r.MemberNames).Distinct().ToList();

            if (errorProperties.Any(p => IsStage1Property(p)))
            {
                _currentStep = 1;
            }
            else if (errorProperties.Any(p => IsStage2Property(p)))
            {
                _currentStep = 2;
            }

            StateHasChanged();
        }
    }

    private bool IsStage1Property(string propertyName)
    {
        var stage1Properties = new[] { nameof(lessonModel.Name),
            nameof(lessonModel.Cost), nameof(lessonModel.LanguageID),
            nameof(lessonModel.Description) };
        return stage1Properties.Contains(propertyName);
    }

    private bool IsStage2Property(string propertyName)
    {
        var stage2Properties = new[] { nameof(lessonModel.Requirements) };
        return stage2Properties.Contains(propertyName);
    }

    private async Task ValidateCurrentStep()
    {
        var isValid = true;

        switch (_currentStep)
        {
            case 1:
                isValid &= ValidateField(nameof(lessonModel.Name));
                isValid &= ValidateField(nameof(lessonModel.Description));
                isValid &= ValidateField(nameof(lessonModel.Cost));
                isValid &= ValidateField(nameof(lessonModel.LanguageID));
                break;
            case 2:
                isValid &= ValidateField(nameof(lessonModel.Requirements));
                break;
        }

        if (isValid)
        {
            NextStep();
        }
    }

    private bool ValidateField(string fieldName)
    {
        var property = _editContext.Model.GetType().GetProperty(fieldName);
        var propertyValue = property?.GetValue(_editContext.Model);
        var validationContext = new ValidationContext(_editContext.Model)
            {
                MemberName = fieldName
            };

        var results = new List<ValidationResult>();
        var isValid = Validator.TryValidateProperty(propertyValue, validationContext, results);

        _editContext.NotifyValidationStateChanged();

        return isValid;
    }

    private async Task FinishCreating()
    {
        var lessonManager = new LessonManager();
        if (EditMode)
        {
            await lessonManager.EditLessonByID((int)LessonID, lessonModel);
        }
        else
        {
            await lessonManager.AddLesson(lessonModel);
        }
        NavManager.NavigateTo("/profile");
    }

    private string GetColor(int number)
    {
        return number == _currentStep ? "#fff701" : "#01ff66";
    }
}