@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using System.ComponentModel.DataAnnotations
@inject IHttpContextAccessor HttpContextAccessor
@inject NavigationManager NavManager
@rendermode InteractiveServer

<head>
    <link rel="stylesheet" href="css/buttons.css" />
    <link rel="stylesheet" href="css/items.css" />
    <link rel="stylesheet" href="css/texts.css" />
</head>

<style>
    div.validation-message {
    color: red;
    font-size: 1.4rem;
    }
</style>

<div class="create-lesson-box">
    @if (IsAuthorized())
    {
        <EditForm style="width: 100%;" Model="lessonModel" FormName="createLessonForm">
            <DataAnnotationsValidator />
            <div class="step-box">
                @switch (_step)
                {
                    case 1:
                        <CreateLessonStep1 lessonModel="lessonModel" />
                        break;
                    case 2:
                        <CreateLessonStep2 lessonModel="lessonModel" />
                        @if (_view < 2) _view = 2;
                        break;
                    case 3:
                        <CreateLessonStep3 lessonModel="lessonModel" />
                        @if (_view < 3) _view = 3;
                        break;
                }
            </div>
            <div class="pagination-box">
                @if (_view >= 1)
                {
                    <button type="button" class="pagination-button" style="width: 50px;background-color: @GetColor(1);" @onclick="() => {ChangeStep(1);}">1</button>
                }
                @if (_view >= 2)
                {
                    <button type="button" class="pagination-button" style="width: 50px;background-color: @GetColor(2);" @onclick="() => {ChangeStep(2);}">2</button>
                }
                @if (_view >= 3)
                {
                    <button type="button" class="pagination-button" style="width: 50px;background-color: @GetColor(3);" @onclick="() => {ChangeStep(3);}">3</button>
                }

                @if (_step != 3)
                {
                    <button type="button" class="pagination-button" style="width: 120px;background-color: #01ff66;" @onclick="NextStep">Далее</button>
                }
                else
                {
                    <button type="button" class="pagination-button" style="width: 180px;background-color: #01ff66;" @onclick="FinishCreating">Завершить</button>
                }
            </div>
        </EditForm>
    }
    else
    {
        <div style="display: inline-block;">
            <p class="not-authorized-link">Вы не авторизованы!</p>
            <a href="/login" class="scale-up-button">Авторизоваться</a>
        </div>
    }
</div>

@code {
    [Parameter]
    public int? LessonID { get; set; }

    [Parameter]
    public bool EditMode { get; set; } = false;

    [SupplyParameterFromForm]
    public LessonInputModel lessonModel { get; set; } = new();

    private int _step = 1;
    private int _view = 1;

    protected override async Task OnInitializedAsync()
    {
        if (IsAuthorized())
        {
            var user = HttpContextAccessor.HttpContext.User;
            lessonModel.AuthorID = int.Parse(user.FindFirst(ClaimTypes.Name)?.Value);
            if (EditMode)
            {
                if (LessonID != null)
                {
                    var lessonManager = new LessonManager();
                    var outputModel = lessonManager.GetLessonByID((int)LessonID);
                    if (outputModel != null)
                    {
                        if (outputModel.Author.ID == lessonModel.AuthorID)
                        {
                            lessonModel = new()
                            {
                                Name = outputModel.Name,
                                Description = outputModel.Description,
                                Cost = outputModel.Cost,
                                Content = outputModel.Content,
                                AuthorID = outputModel.Author.ID,
                                LanguageID = outputModel.Language.ID,
                                Exercises = lessonManager.MapExercisesToInputModels(outputModel.Exercises)
                            };
                        }
                        else
                        {
                            NavManager.NavigateTo("/404");
                        }
                    }
                    else
                    {
                        NavManager.NavigateTo("/404");
                    }
                }
                else
                {
                    NavManager.NavigateTo("/404");
                }
            }
        }
        await base.OnInitializedAsync();
    }

    private void ChangeStep(int nextStep)
    {
        _step = nextStep;
    }

    private void NextStep()
    {
        Console.WriteLine("GO");
        if (_step == 3)
        {
            _step = 1;
        }
        else
        {
            _step++;
        }
    }

    private async Task FinishCreating()
    {
        var lessonManager = new LessonManager();
        if (EditMode)
        {
            lessonManager.UpdateLessonByID((int)LessonID, lessonModel);
        }
        else 
        {
            lessonManager.AddLesson(lessonModel);
        }
        NavManager.NavigateTo("/profile");
    }

    private string GetColor(int number)
    {
        if (number != _step)
        {
            return "#01ff66";
        }
        else
        {
            return "#fff701";
        }
    }

    private bool IsAuthorized()
    {
        var user = HttpContextAccessor.HttpContext.User;
        return user.Identity.IsAuthenticated;
    }

    private async Task ValidateAndProceed()
    {
        _step = 3;
        StateHasChanged();

        var validationContext = new ValidationContext(lessonModel);
        var validationResults = new List<ValidationResult>();

        bool isValid = Validator.TryValidateObject(lessonModel, validationContext, validationResults, true);

        if (isValid)
        {
            FinishCreating();
        }
        else
        {
            var errorProperties = validationResults.SelectMany(r => r.MemberNames).Distinct().ToList();

            if (errorProperties.Any(p => IsStage1Property(p)))
            {
                _step = 1;
            }
            else if (errorProperties.Any(p => IsStage2Property(p)))
            {
                _step = 2;
            }

            StateHasChanged();
        }
    }

    private bool IsStage1Property(string propertyName)
    {
        var stage1Properties = new[] { nameof(lessonModel.Name),
            nameof(lessonModel.Cost), nameof(lessonModel.LanguageID),
            nameof(lessonModel.Description) };
        return stage1Properties.Contains(propertyName);
    }

    private bool IsStage2Property(string propertyName)
    {
        var stage2Properties = new[] { nameof(lessonModel.Content) };
        return stage2Properties.Contains(propertyName);
    }
}