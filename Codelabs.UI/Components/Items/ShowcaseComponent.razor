@using System.Security.Claims
@using Codelabs.BLL
@using Codelabs.Core.OutputModels
@inject AuthService AuthService
@rendermode InteractiveServer

<head>
    <link rel="stylesheet" href="css/buttons.css">
    <link rel="stylesheet" href="css/texts.css">
    <link rel="stylesheet" href="css/items.css">
</head>

@if (IsLoading)
{
    <span class="@_preloaderClasses"></span>
}
else
{
    @if (Models is not null)
    {
        <div class="mt-4 grid container sc-container-style gap-0">
            @if (Models.Count == 0)
            {
                <p style="color: var(--text-color-primary)">Ничего не найдено</p>
            }
            else
            {
                @foreach (var modelArray in Models)
                {
                    <div class="row mx-2">
                        @foreach (var model in modelArray)
                        {
                            @if (UserID != null)
                            {
                                <div class="col mt-2 centered-flex-div">
                                    <LessonCard doOpenLesson="true" Model="@model" />
                                </div>
                            }
                            else if (AuthorID != null)
                            {
                                <div class="col mt-2 centered-flex-div">
                                    <LessonCard doEditLesson="true" Model="@model" />
                                </div>
                            }
                            else if (_purchaseManager.IsUserBoughtLesson(_currentUserId, model.ID))
                            {
                                <div class="col mt-2 centered-flex-div">
                                    <LessonCard doBuyLesson="true" Model="@model" />
                                </div>
                            }
                        }
                    </div>
                }
            }
        </div>
    }
}

@code {
    [Parameter] public int? AuthorID { get; set; }
    [Parameter] public int ChunkSize { get; set; }
    [Parameter] public int? UserID { get; set; }

    private PurchaseManager _purchaseManager = new();

    private bool _isAuthor;

    private int _currentUserId;

    private List<LessonForShowcaseOutputModel[]>? Models { get; set; }
    private bool IsLoading { get; set; } = true;
    private bool _firstRender = true;

    private string _preloaderClasses = "preload-spinner";

    protected override void OnInitialized()
    {
        if (AuthService.IsAuthorized())
        {
            var userRole = AuthService.GetUserRole();
            _currentUserId = (int)AuthService.GetUserID();
            _isAuthor = userRole switch
            {
                RoleType.Author => true,
                _ => false
            };
            return;
        }
        _isAuthor = false;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (_firstRender)
        {
            _firstRender = false;
            _ = LoadData();
        }
    }

    private async Task LoadData()
    {
        IsLoading = true;
        StateHasChanged();
        var manager = new LessonManager();
        Console.WriteLine("IM LOADING LESSONS");
        if (AuthorID.HasValue)
        {
            Console.WriteLine("IM LOADING AUTHOR");
            var models = await manager.GetAllExistingLessonsByAuthor(AuthorID.Value);
            Models = models.Chunk(ChunkSize).ToList();
        }
        else 
        {
            Console.WriteLine("IM LOADING USER");
            if (UserID.HasValue) {
                Console.WriteLine("user id has value");
                Console.WriteLine(UserID);
                Console.WriteLine(UserID.Value);
                var models = await manager.GetAllExistingLessonsFromPurchasesByUser(UserID.Value);
                Models = models.Chunk(ChunkSize).ToList();
                Console.WriteLine("this model");
                Console.WriteLine(Models.Count());
            }
            else
            {
                Console.WriteLine("IM LOADING ALL");
                var models = await manager.GetAllExistingLessons();
                Models = models.Chunk(ChunkSize).ToList();
            }
        }
        IsLoading = false;
        _preloaderClasses = "preload-spinner preload-spinner-hide";
        StateHasChanged();
    }
}