@page "/register"
@using System.Security.Claims
@using Codelabs.Core
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies

<PageTitle>Register</PageTitle>

<style>
    .input-form {
        display: flex;
        align-items: center;
        flex-direction: column;
    }
    .form-item-box {
        display: flex;
        flex-direction: column;
        align-items: center;
    }
    .form-item {
        margin-top: 10px;
        width: 260px;
        height: 42px;
        text-indent: 10px;
        color: #eaeaea !important;
        background-color: #070709;
        border: 3px solid #ff0266;
        border-radius: 6px;
    }
    .form-item:-webkit-autofill {
        background-color: #070709 !important;
        color: #eaeaea !important;
    }
    .form-item:focus {
        background-color: #070709;
        border: 3px solid #ff0266;
    }
    .form-item::placeholder {
        color: #a3a3a3 !important;
    }
    div.validation-message {
        color: red;
    }
    .success-button {
        margin-top: 20px;
        width: 260px;
    }
</style>

<EditForm class="input-form" Model="registerModel" OnValidSubmit="StartRegister" FormName="registerForm">
    <DataAnnotationsValidator />
    <div class="form-item-box">
        <InputText class="form-item" @bind-Value="registerModel.Name" Placeholder="Имя" />
        <ValidationMessage For="@(() => registerModel.Name)" />
    </div>
    <div class="form-item-box">
        <InputText class="form-item" @bind-Value="registerModel.Surname" Placeholder="Фамилия" />
        <ValidationMessage For="@(() => registerModel.Surname)" />
    </div>
    <div class="form-item-box">
        <InputText class="form-item" @bind-Value="registerModel.Login" Placeholder="Логин" />
        <ValidationMessage For="@(() => registerModel.Login)" />
    </div>
    <div class="form-item-box">
        <InputText class="form-item" @bind-Value="registerModel.Password" Placeholder="Пароль" />
        <ValidationMessage For="@(() => registerModel.Password)" />
    </div>
    <div class="form-item-box">
        <InputText class="form-item" @bind-Value="registerModel.Phone" Placeholder="Телефон" />
        <ValidationMessage For="@(() => registerModel.Phone)" />
    </div>
    <div class="form-item-box">
        <InputText class="form-item" @bind-Value="registerModel.Email" Placeholder="Эл.почта" />
        <ValidationMessage For="@(() => registerModel.Email)" />
    </div>
    @if (role == "author") {
        <div class="form-item-box">
            <InputText class="form-item" @bind-Value="registerModel.TIN" Placeholder="ИНН" />
            <ValidationMessage For="@(() => registerModel.TIN)" />
        </div>
    }
    <p style="color: red;">@_errorMessage</p>
    <Button class="success-button" Type="ButtonType.Submit" Color="ButtonColor.Success">Зарегистрироваться</Button>
</EditForm>

@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public string? role { get; set; }

    [CascadingParameter]
    public HttpContext httpContext { get; set; }

    [SupplyParameterFromForm]
    public UserInputModel registerModel { get; set; } = new();

    private string _errorMessage;

    public async void StartRegister()
    {

        var userManager = new UserManager();

        if (userManager.GetUserByLogin(registerModel.Login) == null)
        {
            switch (role)
            {
                case "buyer":
                    registerModel.Role = RoleType.Buyer;
                    break;
                case "author":
                    registerModel.Role = RoleType.Author;
                    break;
            }

            int? newUserId = userManager.AddUser(registerModel);

            if (role == "author")
            {
                if (userManager.GetAuthorInfoByTIN(registerModel.TIN) == null)
                {
                    userManager.AddAuthorInfo(new AuthorInfoInputModel()
                    {
                        UserID = (int)newUserId,
                        TIN = registerModel.TIN
                    });
                }
                else
                {
                    _errorMessage = "Пользователь с данным ИНН уже существует";
                    return;
                }
            }

            var claims = new List<Claim>()
            {
                new Claim(ClaimTypes.Name, $"{newUserId}"),
                new Claim(ClaimTypes.Role, $"{(int)registerModel.Role}")
            };

            var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
            var pr = new ClaimsPrincipal(identity);

            await httpContext.SignInAsync(pr);
        }
        else 
        {
            _errorMessage = "Пользователь с данным логином уже существует";
        }
    }
}
