@page "/404"
<canvas id="gameCanvas"></canvas>

<div class="error-container">
    <div class="error-text">ERROR 404</div>
    <a href="/" class="return-link">На главную </a>
</div>
<style>
    #gameCanvas {
        position: fixed;
        left: 0;
        top: 0;
        background: black;
        z-index: 0;
    }

    body {
        margin: 0;
        overflow: hidden;
    }

    .error-container {
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        text-align: center;
        z-index: 1000;
        opacity: 0;
        animation: fadeIn 1s ease-out forwards;
        animation-delay: 2s;
    }

    .error-text {
        color: #ff4444;
        font: bold 80px 'Arial Black', sans-serif;
        text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);
        margin-bottom: 1rem;
    }

    .return-link {
        color: #2ecc71;
        font: 30px Arial;
        text-decoration: none;
        transition: all 0.3s ease;
        display: block;
    }

    .return-link:hover {
        color: #4CAF50;
        text-decoration: underline;
        transform: scale(1.05);
    }

    @@keyframes fadeIn {
        from { opacity: 0; transform: translate(-50%, -40%); }
        to { opacity: 1; transform: translate(-50%, -50%); }
    }
</style>

<script>
    var gamePieces = [];
    var letters = ["C", "O", "D", "E", "/", "\\", "A", "B", "S"];

    function startGame() {
        const fontSize = 40;
        const tempCanvas = document.createElement('canvas');
        const tempCtx = tempCanvas.getContext('2d');
        tempCtx.font = `${fontSize}px Arial`;
        
        let totalWidth = letters.reduce((sum, letter) => 
            sum + tempCtx.measureText(letter).width, 0);
        
        let startX = (window.innerWidth - totalWidth) / 2;
        let currentX = startX;

        letters.forEach((letter, index) => {
            const letterWidth = tempCtx.measureText(letter).width;
            gamePieces.push(new component(
                letter,
                currentX,
                -150 - (index * 60),
                fontSize,
                "white",
                letterWidth
            ));
            currentX += letterWidth;
        });
        myGameArea.start();
    }

    var myGameArea = {
        canvas: document.getElementById("gameCanvas"),
        start: function() {
            this.canvas.width = window.innerWidth;
            this.canvas.height = window.innerHeight;
            this.context = this.canvas.getContext("2d");
            this.interval = setInterval(updateGameArea, 20);
            
            window.addEventListener('resize', () => {
                this.canvas.width = window.innerWidth;
                this.canvas.height = window.innerHeight;
            });
        },
        clear: function() {
            this.context.fillStyle = "black";
            this.context.fillRect(0, 0, this.canvas.width, this.canvas.height);
        }
    }

    function component(text, x, y, fontSize, color, width) {
        this.text = text;
        this.x = x;
        this.y = y;
        this.fontSize = fontSize;
        this.color = color;
        this.width = width;
        this.gravity = 0.5;
        this.gravitySpeed = 0;
        this.bounce = 0.7;
        this.damping = 0.9;

        this.update = function() {
            const ctx = myGameArea.context;
            ctx.font = `${this.fontSize}px Arial`;
            ctx.fillStyle = this.color;
            ctx.fillText(this.text, this.x, this.y);
        }

        this.newPos = function() {
            this.gravitySpeed += this.gravity;
            this.y += this.gravitySpeed;
            this.hitBottom();
        }

        this.hitBottom = function() {
            const bottom = myGameArea.canvas.height - this.fontSize;
            if (this.y > bottom) {
                this.y = bottom;
                this.gravitySpeed = -(this.gravitySpeed * this.bounce);
                
                if (Math.abs(this.gravitySpeed) < 1) {
                    this.gravitySpeed = 0;
                } else {
                    this.gravitySpeed *= this.damping;
                }
            }
        }
    }

    function updateGameArea() {
        myGameArea.clear();
        gamePieces.forEach(piece => {
            piece.newPos();
            piece.update();
        });
    }

    window.onload = startGame;
</script>