@page "/login"
@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@inject IHttpContextAccessor HttpContextAccessor

<PageTitle>Авторизация</PageTitle>

<head>
    <link rel="stylesheet" href="css/buttons.css" />
    <link rel="stylesheet" href="css/texts.css" />
    <link rel="stylesheet" href="css/items.css" />
</head>

@if (!IsAuthorized())
{
    @if (_isLoaded)
    {
        <script>
            window.location.href = "/profile";
        </script>
    }
    else
    {
        <EditForm class="login-form" Model="loginModel" OnValidSubmit="@OnSubmit" FormName="loginForm">
            <DataAnnotationsValidator />
            <div class="form-item-box">
                <InputText class="form-item" id="loginField" style="width: 480px;" @bind-Value="loginModel.Login" Placeholder="Логин" />
                <ValidationMessage For="@(() => loginModel.Login)" />
            </div>

            <div class="form-item-box">
                <InputText class="form-item" id="passwordField" style="width: 480px;" @bind-Value="loginModel.Password" Placeholder="Пароль" />
                <ValidationMessage For="@(() => loginModel.Password)" />
            </div>
            <p class="validation-message">@ErrorMessage</p>
            <Button class="submit-button medium-text" id="authoriseButton" Type="ButtonType.Submit" Color="ButtonColor.Success">Авторизоваться</Button>

            <a class="to-register-button medium-text underlined-name" href="/register?role=buyer">Нет аккаунта? Зарегистрироваться</a>
        </EditForm>
    }
}
else
{
    <div class="center-content-box">
        <p class="medium-text">Вы уже авторизованы</p>
    </div>
}

@code {
    [CascadingParameter]
    public HttpContext httpContext { get; set; }

    [SupplyParameterFromForm]
    public UserInputModel loginModel { get; set; } = new UserInputModel();

    private bool _isLoaded = false;

    private string ErrorMessage;

    private string _submitButtonClasses = "submit-button";

    private async Task OnSubmit()
    {
         _ = StartLogin();
    }
    
    private async Task<UserOutputModel> LoadUser()
    {
        var userManager = new UserManager();
        var user = userManager.GetUserByLogin(loginModel.Login);
        return user;
    }

    public async Task StartLogin()
    {
        _submitButtonClasses += " submit-with-loader-button";
        StateHasChanged();
        var user = await LoadUser();

        if (user is not null)
        {
            if (user.Password == loginModel.Password)
            {
                user = (UserOutputModel)user;
                var claims = new List<Claim>()
                {
                    new Claim(ClaimTypes.Name, $"{user.ID}"),
                    new Claim(ClaimTypes.Role, $"{(int)user.Role}")
                };

                var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
                var pr = new ClaimsPrincipal(identity);

                await httpContext.SignInAsync(pr);
                _isLoaded = true;
                StateHasChanged();
            }
            else
            {
                ErrorMessage = "Некоректный пароль";
            }
        }
        else
        {
            ErrorMessage = "Некоректный логин";
        }
    }

    private bool IsAuthorized()
    {
        var user = HttpContextAccessor.HttpContext.User;
        return user.Identity.IsAuthenticated;
    }
}