@page "/login"
@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@* @inject NavigationManager NavManager *@

<PageTitle>Login</PageTitle>

<head>
    <link rel="stylesheet" href="css/buttons.css" />
    <link rel="stylesheet" href="css/items.css" />
</head>

<style>
    div.validation-message {
    color: red;
    }
</style>
@* *@
@* @if (_isLoading) *@
@* { *@
@*     <Spinner /> *@
@* } *@
@* @if (_isLoaded) *@
@* { *@
@*     <script> *@
@*         window.location.href = "/другая-страница"; *@
@*     </script> *@
@* } *@
@* else *@
@* { *@
    <EditForm class="login-form" Model="loginModel" OnValidSubmit="@OnSubmit" FormName="loginForm">
        <DataAnnotationsValidator />
        <div class="form-item-box">
            <InputText class="form-item" @bind-Value="loginModel.Login" Placeholder="Логин" />
            <ValidationMessage For="@(() => loginModel.Login)" />
        </div>
        <div class="form-item-box">
            <InputText class="form-item" @bind-Value="loginModel.Password" Placeholder="Пароль" />
            <ValidationMessage For="@(() => loginModel.Password)" />
        </div>
        <p style="color: red;">@ErrorMessage</p>
        <Button class="@_submitButtonClasses" Type="ButtonType.Submit" Color="ButtonColor.Success">Авторизоваться</Button>
        <a class="to-register-button" href="/register?role=buyer">Нет аккаунта? Зарегистрироваться</a>
    </EditForm>
@* } *@

@code {
    [CascadingParameter]
    public HttpContext httpContext { get; set; }

    [SupplyParameterFromForm]
    public UserInputModel loginModel { get; set; } = new UserInputModel();

    private bool _isLoading = false;

    private string ErrorMessage;

    private string _submitButtonClasses = "submit-button";

    private async Task OnSubmit()
    {
        _ = StartLogin();
    }
    
    private async Task<UserOutputModel> LoadUser()
    {
        var userManager = new UserManager();
        var user = userManager.GetUserByLogin(loginModel.Login);
        return user;
    }

    public async Task StartLogin()
    {

        _isLoading = true;
        _submitButtonClasses += " submit-with-loader-button";
        StateHasChanged();
        var user = await LoadUser();
        _isLoading = false;
        StateHasChanged();
        

        if (user is not null)
        {
            if (user.Password == loginModel.Password)
            {
                user = (UserOutputModel)user;
                var claims = new List<Claim>()
                {
                    new Claim(ClaimTypes.Name, $"{user.ID}"),
                    new Claim(ClaimTypes.Role, $"{(int)user.Role}")
                };

                var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
                var pr = new ClaimsPrincipal(identity);

                await httpContext.SignInAsync(pr);
                NavManager.NavigateTo("/");
            }
            else
            {
                ErrorMessage = "Некоректный пароль";
            }
        }
        else
        {
            ErrorMessage = "Некоректный логин";
        }
    }
}
