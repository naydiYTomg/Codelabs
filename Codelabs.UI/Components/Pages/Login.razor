@page "/login"
@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@inject NavigationManager NavManager

<PageTitle>Авторизация</PageTitle>

<head>
    <link rel="stylesheet" href="css/buttons.css" />
    <link rel="stylesheet" href="css/items.css" />
</head>

<style>
    div.validation-message {
        color: red;
    }
</style>

<EditForm class="login-form" Model="loginModel" OnValidSubmit="StartLogin" FormName="loginForm">
    <DataAnnotationsValidator />
    <div class="form-item-box">
        <InputText class="form-item" @bind-Value="loginModel.Login" Placeholder="Логин" />
        <ValidationMessage For="@(() => loginModel.Login)" />
    </div>
    <div class="form-item-box">
        <InputText class="form-item" @bind-Value="loginModel.Password" Placeholder="Пароль" />
        <ValidationMessage For="@(() => loginModel.Password)" />
    </div>
    <p style="color: red;">@ErrorMessage</p>
    <Button class="submit-button" Type="ButtonType.Submit" Color="ButtonColor.Success">Авторизоваться</Button>
    <a class="to-register-button" href="/register?role=buyer">Нет аккаунта? Зарегистрироваться</a>
</EditForm>

@code {
    [CascadingParameter]
    public HttpContext httpContext { get; set; }

    [SupplyParameterFromForm]
    public UserInputModel loginModel { get; set; } = new UserInputModel();

    private string ErrorMessage;

    public async void StartLogin()
    {

        var userManager = new UserManager();
        var user = userManager.GetUserByLogin(loginModel.Login);

        if (user != null)
        {
            if (user.Password == loginModel.Password)
            {
                user = (UserOutputModel)user;
                var claims = new List<Claim>()
                {
                    new Claim(ClaimTypes.Name, $"{user.ID}"),
                    new Claim(ClaimTypes.Role, $"{(int)user.Role}")
                };

                var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
                var pr = new ClaimsPrincipal(identity);

                await httpContext.SignInAsync(pr);
            }
            else
            {
                ErrorMessage = "Некоректный пароль";
            }
        }
        else
        {
            ErrorMessage = "Некоректный логин";
        }
    }
}
