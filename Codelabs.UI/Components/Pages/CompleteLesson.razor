@page "/completing-lesson"
@rendermode InteractiveServer
@using System.Security.Claims
@inject AuthService AuthService
@inject NavigationManager NavManager

<PageTitle>Прохождение урока</PageTitle>

<head>
    <link rel="stylesheet" href="css/buttons.css" />
    <link rel="stylesheet" href="css/items.css" />
    <link rel="stylesheet" href="css/miscellaneous.css">
    <link rel="stylesheet" href="css/texts.css" />
</head>

@if (AuthService.IsAuthorized() && AuthService.GetUserRole() == RoleType.Buyer)
{
    @if (lessonModel != null)
    {
        <div class="completing-lesson-box">
            <div class="completing-lesson-info-box">
                <p class="medium-text">@lessonModel.Name</p>
                <p class="small-text">
                    Автор: <span class="small-text underlined-wavy-name">@lessonModel.Author.Login</span>
                </p>
            </div>
            <div class="form-item step2-box">
                <MarkdownPreview Content="@lessonModel.Content" />
            </div>
            @if (lessonModel.Exercises.Count != 0)
            {
                <button class="to-exercises-button" @onclick="ToExercises">К задачам</button>
            }
            else
            {
                <p style="margin-top: 10px;" class="medium-text">
                    Автор не добавил задачки к данному уроку. <span><a href="/profile" class="to-register-button medium-text underlined-name">К остальным урокам</a></span>
                </p>
            }
        </div>
    }
}
else if (!AuthService.IsAuthorized())
{
    <div class="center-content-box">
        <p class="not-authorized-link">Вы не авторизованы! <span><a href="/login" class="to-register-button medium-text underlined-name">Авторизоваться</a></span></p>
    </div>
}
else if (AuthService.GetUserRole() != RoleType.Buyer)
{
    <div class="center-content-box">
        <p class="not-authorized-link">Вы авторизованы как автор! Войдите как покупатель. <span><a href="/login" class="to-register-button medium-text underlined-name">Авторизоваться</a></span></p>
    </div>
}

@code {
    [SupplyParameterFromQuery]
    public int? id { get; set; }

    private LessonOutputModel lessonModel;

    protected override async Task OnInitializedAsync()
    {
        if (AuthService.IsAuthorized())
        {
            if (AuthService.GetUserRole() == RoleType.Buyer)
            {
                if (id != null)
                {
                    var lessonManager = new LessonManager();
                    lessonModel = await lessonManager.GetLessonByID((int)id);
                    if (lessonModel != null)
                    {
                        var purchaseManager = new PurchaseManager();
                        if (!purchaseManager.IsUserBoughtLesson((int)AuthService.GetUserID(), lessonModel.ID))
                        {
                            NavManager.NavigateTo("/404");
                        }
                    }
                    else
                    {
                        NavManager.NavigateTo("/404");
                    }
                }
                else
                {
                    NavManager.NavigateTo("/404");
                }
            }
        }
    }

    private async Task ToExercises()
    {
        var exerciseID = lessonModel.Exercises[0].ID;
        NavManager.NavigateTo($"/completing-exercise?exercise_id={exerciseID}", true);
    }
}
